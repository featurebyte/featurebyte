version: '3'

env:
  FEAST_USAGE: False

tasks:
  install:
    desc: "Install the project dependencies"
    run: once
    sources:
      - pyproject.toml
      - uv.lock
    cmds:
      - uv sync --dev

  default:
    desc: "Run ALL the linter checks."
    deps:
      - task: install
    cmds:
      - task: pr
      - task: safety

  format:
    desc: "Format the code"
    sources:
      - featurebyte/**/*
      - tests/**/*
      - uv.lock
      - pyproject.toml
    deps:
      - task: install
    cmds:
      - task: format:toml
      - task: format:ruff

  format:toml:
    desc: "Format the toml files"
    sources:
      - uv.lock
      - pyproject.toml
    deps:
      - task: install
    cmds:
      - uv run toml-sort --in-place uv.lock

  format:ruff:
    desc: "Format the toml files"
    sources:
      - featurebyte/**/*
      - tests/**/*
    deps:
      - task: install
    cmds:
      - uv run ruff check --select I --diff || uv run ruff check --select I --fix
      - uv run ruff check --diff || uv run ruff check --fix
      - uv run ruff format --diff || uv run ruff format

  pr:
    desc: "Run the linter, but without the safety check. This is run on every PR. Safety check will be run on deploy."
    deps:
      - task: install
      - task: import-rules
    cmds:
      - task: style
      - task: type
      - task: bandit

  style:
    desc: "Run the linter[style]"
    sources:
      - uv.lock
      - featurebyte/**/*
      - tests/**/*
    cmds:
      - task: style-ruff
      - task: style-darglint
      - uv run toml-sort --check uv.lock

  style-ruff:
    desc: "Run the linter[style] with only ruff"
    sources:
      - featurebyte/**/*
      - tests/**/*
    cmds:
      - uv run ruff check
      - uv run ruff format

  style-darglint:
    desc: "Run the linter[style] with only darglint"
    vars:
      CPU_CORES:
        sh: python -c 'import multiprocessing as mp; print(mp.cpu_count())'
    env:
      DARG_SOURCES:
        sh: |
          echo "$(find featurebyte -type d \( -path featurebyte/routes \) -prune -false -o -name "*.py" ! -path "featurebyte/__main__.py" ! -path "featurebyte/datasets/*" ! -path "featurebyte/conftest.py" | xargs)" "$(find featurebyte -type f \( -path featurebyte/routes \) -o -name "controller.py" | xargs)"
    sources:
      - featurebyte/**/*
      - tests/**/*
    cmds:
      - echo "${DARG_SOURCES}" | xargs -n16 -P {{ .CPU_CORES }} uv run darglint --docstring-style numpy --strictness full -v 2

  type:
    desc: "Run the linter[type]"
    sources:
      - uv.lock
      - pyproject.toml
      - featurebyte/**/*
      - tests/**/*
    cmds:
      - cmd: if [ ! -d .mypy_cache ]; then mkdir .mypy_cache; fi
        silent: true
      - uv run mypy --install-types --non-interactive --config-file pyproject.toml --exclude '(featurebyte/conftest.py|site)' .

  safety:
    desc: "Run the linter[safety]"
    sources:
      - uv.lock
      - pyproject.toml
      - featurebyte/**/*
    cmds:
    - uv run pip-audit

  bandit:
    desc: "Run the linter[bandit]"
    sources:
      - uv.lock
      - pyproject.toml
      - featurebyte/**/*
    cmds:
      - uv run bandit -c pyproject.toml -ll --recursive featurebyte

  import-rules:
    desc: Check for import rule violations
    sources:
      - featurebyte/**/*
      - scripts/enforce_import_rules.py
    cmds:
      - python scripts/enforce_import_rules.py
