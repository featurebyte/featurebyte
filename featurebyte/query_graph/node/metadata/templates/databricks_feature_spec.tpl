# auto-generated by FeatureByte (based-on databricks-feature-store {{databricks_sdk_version}})
# Import necessary modules for feature engineering and machine learning
from databricks.feature_engineering import FeatureEngineeringClient
from databricks.feature_engineering import FeatureFunction, FeatureLookup
from sklearn import linear_model

# Initialize the Feature Engineering client to interact with Databricks Feature Store
fe = FeatureEngineeringClient()

{% if require_timestamp_lookup_key -%}
# Timestamp column name used to retrieve the latest feature values
timestamp_lookup_key = "POINT_IN_TIME"

{% endif -%}
# Define the features for the model
# FeatureLookup is used to specify how to retrieve features from the feature store
# Each FeatureLookup or FeatureFunction object defines a set of features to be included
features = {{features}}

# List of columns to exclude from the training set
# Users should consider including request columns and primary entity columns here
# This is important if these columns are not features but are only needed for lookup purposes
exclude_columns = {{exclude_columns}}

# Prepare the training set
# 'base_df' should include primary entity columns, any request columns used in the feature, and the target column
# 'features' is a list of feature lookups to be included in the training set
# '[TARGET_COLUMN]' should be replaced with the actual name of the target column
# 'exclude_columns' is a list of columns to be excluded from the training set
training_set = fe.create_training_set(
    df=base_df,
    feature_lookups=features,
    label="[TARGET_COLUMN]",
    exclude_columns=exclude_columns,
)

# Load the training set as a Pandas DataFrame for model training
training_df = training_set.load_df().toPandas()

# Separate the features (X_train) and the target variable (y_train) for model training
# '[TARGET_COLUMN]' should be replaced with the actual name of the target column
X_train = training_df.drop(["[TARGET_COLUMN]"], axis=1)
y_train = training_df.label

# Create and train the linear regression model using the training data
model = linear_model.LinearRegression().fit(X_train, y_train)
