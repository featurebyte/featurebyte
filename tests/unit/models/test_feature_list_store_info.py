"""
Test feature list store info related models
"""
import textwrap

import pytest

from featurebyte.models.feature_list_store_info import (
    DataBricksFeatureFunction,
    DataBricksFeatureLookup,
    DataBricksStoreInfo,
)


@pytest.fixture(name="databricks_store_info")
def databricks_store_info_fixture():
    """
    DataBricks store info fixture
    """
    return DataBricksStoreInfo(
        feature_specs=[
            DataBricksFeatureLookup(
                table_name="ml.feature_table.column1",
                lookup_key=["cust_id"],
                timestamp_lookup_key="POINT_IN_TIME",
                lookback_window=None,
                feature_names=["feature1"],
                rename_outputs={"feature1": "magic_feature1"},
            ),
            DataBricksFeatureFunction(
                udf_name="udf_name",
                input_bindings={"x1": "ml.feature_table.column2"},
                output_name="magic_feature2",
            ),
        ],
        exclude_columns=["column3"],
    )


def test_databricks_feature_specs_definition(databricks_store_info):
    """Test DataBricks feature specs definition"""
    feature_specs = databricks_store_info.feature_specs_definition
    expected = """
    # auto-generated by FeatureByte (based-on databricks-feature-store 0.16.3)
    from databricks.feature_engineering import FeatureFunction, FeatureLookup

    features = [
        FeatureLookup(
            table_name="ml.feature_table.column1",
            lookup_key=["cust_id"],
            timestamp_lookup_key="POINT_IN_TIME",
            lookback_window=None,
            feature_names=["feature1"],
            rename_outputs={"feature1": "magic_feature1"},
        ),
        FeatureFunction(
            udf_name="udf_name",
            input_bindings={"x1": "ml.feature_table.column2"},
            output_name="magic_feature2",
        ),
    ]
    exclude_columns = ["column3"]
    """
    assert feature_specs.strip() == textwrap.dedent(expected).strip()
