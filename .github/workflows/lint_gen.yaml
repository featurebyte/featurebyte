# THIS FILE IS GENERATED. PLEASE DO NOT MODIFY DIRECTLY.
# Please refer to the `lint.py` file in the `featurebyte/infrastructure` repo if you want to update it.

name: lint
'on':
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
permissions: read-all
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version:
        - 3.8.12
    steps:
    - uses: actions/checkout@v3
    - uses: arduino/setup-task@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        version: 3.x
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup cache
      uses: actions/cache@v3
      with:
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
        path: .venv
        restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
    - name: Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.3.1
    - name: Configure Poetry
      run: poetry config virtualenvs.in-project true
    - name: Install packages needed for build
      run: sudo apt-get install libsasl2-dev gcc
    - name: Lint Checks
      run: task lint-pr
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
    - lint
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - if: ${{ github.event_name == 'pull_request' }}
      name: Get Author Email (PR)
      run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")" >> $GITHUB_ENV
    - if: ${{ github.event_name != 'pull_request' }}
      name: Get Author Email (PUSH)
      run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_REF_NAME}")" >> $GITHUB_ENV
    - name: Get Channel ID
      run: |-
        export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH }}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
    - name: Load LINT_RESULT into env
      run: echo "LINT_RESULT=${{ needs.lint.result }}" >> $GITHUB_ENV
    - name: Load REPOSITORY into env
      run: echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
    - env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH }}
      if: ${{ env.CHANNEL_ID != '' }}
      name: Send Slack notification with workflow result.
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: ${{ env.CHANNEL_ID }}
        payload: |-
          {
              "text": "${{ env.REPOSITORY }}[${{ github.workflow }}] [${{ env.LINT_RESULT }}]",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "```lint: [${{ env.LINT_RESULT }}]```"
                      }
                  }
              ]
          }
