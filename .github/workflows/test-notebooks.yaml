name: test-notebooks
'on':
  workflow_dispatch: { }
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
      - stable/*
      - release/*
  push:
    branches:
      - main
concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref }}"
  cancel-in-progress: true
env:
  GCR_DOCKER_LOCATION: us-central1
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64
jobs:
  test-deep-dive-notebooks:
    runs-on:
      group: Public Runners
    strategy:
      matrix:
        python-version:
          - 3.10.14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v4
        with:
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          path: .venv
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
      - name: Install Poetry + Configure
        run: |-
          pip install poetry==2.1.2
          poetry config virtualenvs.in-project true
          poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: Run task install
        run: task install
      - name: Build docker image
        run: task docker-build
      - name: Retag docker image
        run: docker tag featurebyte-server:latest "featurebyte/featurebyte-server:$(poetry version --short)"
      - name: Run notebook tests
        run: task test-deep-dive-notebooks
    timeout-minutes: 30
  test-quick-start-notebooks:
    runs-on:
      group: Public Runners
    strategy:
      matrix:
        python-version:
          - 3.10.14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v4
        with:
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          path: .venv
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
      - name: Install Poetry + Configure
        run: |-
          pip install poetry==2.1.2
          poetry config virtualenvs.in-project true
          poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: Run task install
        run: task install
      - name: Build docker image
        run: task docker-build
      - name: Retag docker image
        run: docker tag featurebyte-server:latest "featurebyte/featurebyte-server:$(poetry version --short)"
      - name: Run notebook tests
        run: task test-quick-start-notebooks
    timeout-minutes: 45
  test-playground-notebooks:
    runs-on:
      group: Public Runners
    strategy:
      matrix:
        python-version:
          - 3.10.14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v4
        with:
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          path: .venv
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
      - name: Install Poetry + Configure
        run: |-
          pip install poetry==2.1.2
          poetry config virtualenvs.in-project true
          poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: Run task install
        run: task install
      - name: Build docker image
        run: task docker-build
      - name: Retag docker image
        run: docker tag featurebyte-server:latest "featurebyte/featurebyte-server:$(poetry version --short)"
      - name: Run notebook tests
        run: task test-playground-notebooks
    timeout-minutes: 45
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - test-quick-start-notebooks
      - test-deep-dive-notebooks
      - test-playground-notebooks
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - if: ${{ github.event_name == 'pull_request' }}
        name: Get Author Email (PR)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${{ github.head_ref }}")" >> $GITHUB_ENV
      - if: ${{ github.event_name != 'pull_request' }}
        name: Get Author Email (PUSH)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${{ github.ref_name }}")" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |-
          echo "${{ secrets.SLACK_USERS }}" > users.csv
          export AUTHOR_ID="$(grep -oP "${{ env.AUTHOR_EMAIL }},\s*\K[^,]*" users.csv)"
          if [ "${AUTHOR_ID}" = "" ]; then
            echo "No Slack user found for ${AUTHOR_EMAIL}"
            export AUTHOR_ID="C03D81HC6Q5"  # Developer Channel
            exit 1
          fi
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Set Environment
        run: |
          echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - name: Send Slack notification with workflow result.
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_OAUTH }}
          payload: |
            channel: ${{ env.CHANNEL_ID }}
            text: "${{ env.REPOSITORY }} [${{ github.workflow }}] [${{ needs.test-quick-start-notebooks.result }}, ${{ needs.test-deep-dive-notebooks.result }}, ${{ needs.test-playground-notebooks.result }}]"
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
              - type: section
                text:
                  type: mrkdwn
                  text: |-
                    ```
                    test-quick-start-notebooks: [${{ needs.test-quick-start-notebooks.result }}]
                    test-deep-dive-notebooks:   [${{ needs.test-deep-dive-notebooks.result }}]
                    test-playground-notebooks:  [${{ needs.test-playground-notebooks.result }}]
                    ```
