name: build

# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## GCR_PYPI_CREDENTIALS_RW_B64   | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Python     ] read write
## GCR_DOCKER_CREDENTIALS_R_B64  | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Docker     ] read
## SLACK_OAUTH                   | Slack App OAUTH Token           | [Slack                          ] write message
## SNOWFLAKE_PASSWORD            | Snowflake password              | [Snowflake                      ] password
## GIST_SECRET                   | Github Gist Token               | [Github | Gist                  ] Write
## DATABRICKS_TOKEN              | Databricks access token         | [Databricks                     ] password

on:
  workflow_dispatch:
  pull_request:
    types:
      [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: write
  repository-projects: read
  issues: write
  pull-requests: write

env:
  # Snowflake
  SNOWFLAKE_USER: github
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ACCOUNT: "fm54506.us-central1.gcp"
  SNOWFLAKE_WAREHOUSE: COMPUTE_WH
  SNOWFLAKE_DATABASE: FEATUREBYTE_TESTING
  SNOWFLAKE_SCHEMA: PUBLIC
  SNOWFLAKE_SCHEMA_FEATUREBYTE: FEATUREBYTE
  # Databricks
  DATABRICKS_ACCESS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  DATABRICKS_SERVER_HOSTNAME: 2085793316075774.4.gcp.databricks.com
  DATABRICKS_HTTP_PATH: sql/protocolv1/o/2085793316075774/1010-041133-p07dh5j6
  DATABRICKS_CATALOG: hive_metastore
  DATABRICKS_SCHEMA_FEATUREBYTE: featurebyte_github
  # Python
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64                           # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }} # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
  # Slack
  SLACK_OAUTH: ${{ secrets.SLACK_OAUTH }}
  # Testing
  MONGO_CONNECTION: mongodb://localhost:27021
  FEATUREBYTE_HOME: "/tmp/featurebyte"

jobs:
  flags:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      changes: ${{ steps.workflow_flags.outputs.PYTHON_CHANGES }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'  # Used for checking diff

      - name: Workflow Flags
        id: workflow_flags
        run: |
          # Override if pushing to main
          if [[ '${{ github.event_name }}' == 'push' && '${{ github.ref }}' == 'refs/heads/main' ]]; then
            echo "PYTHON_CHANGES=1" >> $GITHUB_OUTPUT
          else
            echo "PYTHON_CHANGES=$(git diff origin/main..HEAD -- featurebyte/ tests/ pyproject.toml poetry.lock | wc -l) " >> $GITHUB_OUTPUT
          fi

      - name: Summarize
        run: |
          echo "### Changelog" >> $GITHUB_STEP_SUMMARY
          git diff --name-only origin/main..HEAD -- featurebyte/ tests/ pyproject.toml poetry.lock | sed -e 's/^/- /g'  >> $GITHUB_STEP_SUMMARY

  cache:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --extra-index-url "https://_json_key_base64:${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}@${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}/simple/" poetry==1.2.0rc99
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: make install

  test-migrate:
    needs: [flags, cache]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}   # Restore from `cache` job

      - name: Install Poetry
        if: ${{ needs.flags.outputs.changes != 0 }}
        run: |
          pip install --extra-index-url "https://_json_key_base64:${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}@${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}/simple/" poetry==1.2.0rc99
          poetry config virtualenvs.in-project true

      - name: Install dependencies & start mongo
        if: ${{ needs.flags.outputs.changes != 0 }}
        run: |
          make install
          make test-setup

      - name: Authenticate to Google Cloud
        if: ${{ needs.flags.outputs.changes != 0 }}
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_CLOUD_STORAGE_R }}'

      - name: 'Set up Cloud SDK'
        if: ${{ needs.flags.outputs.changes != 0 }}
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Download to staging and restoremongo
        if: ${{ needs.flags.outputs.changes != 0 }}
        run: bash scripts/dump_staging_app.sh

      - name: Run migration test
        if: ${{ needs.flags.outputs.changes != 0 }}
        run: poetry run python scripts/migration_test.py

      - name: stop mongo
        if: ${{ needs.flags.outputs.changes != 0 }}
        run: |
          make test-teardown

  test:
    needs: [flags, cache]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'  # Used for checking diff

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
        restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}   # Restore from `cache` job

    - name: Install Poetry
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: |
        pip install --extra-index-url "https://_json_key_base64:${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}@${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}/simple/" poetry==1.2.0rc99
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: make install

    - name: Run tests
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: make test

    - name: Test Coverage Report
      if: ${{ needs.flags.outputs.changes != 0 }}
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml

    - name: Check test output
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: |
        if [ "${{ steps.coverageComment.outputs.errors }}" -gt '0' ] || [ "${{ steps.coverageComment.outputs.failures }}" -gt '0' ]; then
          cat pytest-coverage.txt
          echo "Errors found in pytest"
          exit 1
        fi
        if [ "${{ steps.coverageComment.outputs.errors }}" == '' ] || [ "${{ steps.coverageComment.outputs.failures }}" == '' ]; then
          cat pytest-coverage.txt
          echo "Weird Error has occurred"
          exit 1
        fi

    - name: Update Coverage Badge
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 773e2960183c0a6fe24c644d95d71fdb
        filename: coverage.json
        label: coverage
        message: ${{ steps.coverageComment.outputs.coverage }}
        color: ${{ steps.coverageComment.outputs.color }}

    - name: Authenticate to Google Cloud
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCR_PYPI_CREDENTIALS_R }}'


    - name: 'Build and Publish with .dev[.N] | Send Push Slack Message'
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
        export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
        export DEV_VERSION=$(gcloud artifacts versions list --project ${GCR_PYPI_PROJECT_ID} --repository=${GCR_PYPI_REPO} --location=${GCR_PYPI_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
            sort --version-sort -r | \
            grep -P "${VERSION}.dev" | \
            head -n 1 | \
            grep -oP "\d+$"
        )
        export DEV_VERSION=${DEV_VERSION:-0}  # Set .dev to 0 if not exist
        export PUBLISH_VERSION="${VERSION}.dev$((DEV_VERSION+=1))"
        sed -i -E "s|^version = \"[^\"]+\"|version = \"${PUBLISH_VERSION}\"|g" pyproject.toml

        poetry config repositories.featurebyte_np https://${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}
        poetry publish --build -r featurebyte_np

        # Slack outputs
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)
        export GITHUB_HEAD_REF=main

        # Sending Slack Message
        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        # Lookup email address and export to AUTHOR_ID
        export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`

        cat .github/slack-template-PUSH.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage


    - name: Slack Message Pull Request
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        # Get Coverage data
        export COVERAGE_PERCENTAGE=${{ steps.coverageComment.outputs.coverage }}
        if [[ "$COVERAGE_PERCENTAGE" != "" ]]; then
          export COVERAGE="\n*Coverage:* \`${COVERAGE_PERCENTAGE}\`"
        else
          export COVERAGE=""
        fi

        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          # Route message to Chester
          export AUTHOR_ID=U03P1DE5R8V
        else
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi
        echo "AUTHOR_ID=${AUTHOR_ID}"

        cat .github/slack-template-PR.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage

    # IF its a MERGE to main branch
    #   Send message to developer channel
    # IF unable to find author email
    #   Send message to chester
    # ELSE
    #   Send message to commit author
    - name: Slack Message failure
      if: ${{ failure() }}
      run: |
        # Get Coverage data
        export COVERAGE_PERCENTAGE=${{ steps.coverageComment.outputs.coverage }}
        if [[ "$COVERAGE_PERCENTAGE" != "" ]]; then
          export COVERAGE="\n*Coverage:* \`${COVERAGE_PERCENTAGE}\`"
        else
          export COVERAGE=""
        fi

        if [[ ${GITHUB_EVENT_NAME} == "push" ]]; then
          export GITHUB_HEAD_REF=main
        fi

        # Get the last committed email address
        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
          export AUTHOR_ID=C03D81HC6Q5  # Send to `developer` Channel
        elif [ -z ${AUTHOR_EMAIL+x} ]; then
          export AUTHOR_ID=U03P1DE5R8V  # Send to `Chester`
        else
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi

        cat .github/slack-template-FAILED.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage


  lint:
    needs: [flags, cache]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
    - uses: actions/checkout@v3
      if: ${{ needs.flags.outputs.changes != 0 }}

    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ needs.flags.outputs.changes != 0 }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      if: ${{ needs.flags.outputs.changes != 0 }}
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
        restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}   # Restore from `cache` job

    - name: Install Poetry
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: |
        pip install --extra-index-url "https://_json_key_base64:${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}@${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}/simple/" poetry==1.2.0rc99
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: make install

    - name: Lint Checks
      if: ${{ needs.flags.outputs.changes != 0 }}
      run: make lint

    # IF unable to find author email
    #   Send message to chester
    # ELSE
    #   Send message to commit author
    - name: Slack Message failure
      if: ${{ failure() }}
      run: |
        # Get the last committed email address
        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          export AUTHOR_ID=U03P1DE5R8V  # Send to `Chester`
        else
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi

        cat .github/slack-template-FAILED.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage
