# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## WORKFLOW_GH_TOKEN__CHESTER    | Github Classic Token            | [Github Cache                   ] delete
## GCR_PYPI_CREDENTIALS_R_B64    | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Python     ] read write

name: "Daily Maintenance"
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *' # On 00:00 Everyday
# Permission to push (DELETE) tags
permissions:
  contents: write
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true
env:
  # Python
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  # TODO (Chester|GA-Release): This will be removed
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}
jobs:
  # Github caches do not update themselves on a successful run
  # This workflow will delete them and rebuild them to the most updated dependencies / requirements
  cache:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
      - name: "delete all cache"
        run: |
          # Get all Caches
          export CACHE_IDS=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.WORKFLOW_GH_TOKEN__CHESTER }}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/caches" | jq '.actions_caches[].id')

          # Delete Cache
          printenv CACHE_IDS | xargs -I {} curl -X DELETE \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.WORKFLOW_GH_TOKEN__CHESTER }}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/caches/{}"
      # Recreates the cache
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }} # Send it to base cache
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3.1
      # TODO (Chester|GA-Release): This will be removed
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}
      - name: Adding C headers
        run: |
          sudo apt-get install python-dev libsasl2-dev gcc
      - name: Install dependencies
        run: task install
  # Removing tags older than 30 days
  # Ignoring release/* tags
  tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: "Setup Git"
        run: |
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: "Removing Tags"
        run: |
          export CUTOFF_DATE=$(date --date="-30days" +%Y-%m-%d)
          export EXPIRED_TAGS=$(git for-each-ref --format '%(creatordate:short) %(refname)' refs/tags | grep -v "release/" | awk -v "CUTOFF_DATE=$CUTOFF_DATE" '{ if ($1 < CUTOFF_DATE) print $2; }')

          echo "### Expired tags" >> $GITHUB_STEP_SUMMARY
          printenv EXPIRED_TAGS >> $GITHUB_STEP_SUMMARY

          # => Convert ref/tags/ABC = :ref/tags/ABC
          # => git push origin :ref/tags/ABC
          printenv EXPIRED_TAGS | sed -nE 's/^/:/p' | xargs git push origin
