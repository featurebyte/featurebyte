name: publish
'on':
  push:
    branches:
      - main
permissions:
  contents: write
env:
  GCR_DOCKER_LOCATION: us-central1
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  SERVER_IMAGE_REPO: us-central1-docker.pkg.dev/vpc-host-nonprod-xa739-xz970/docker/featurebyte-server
concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}
jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        python-version:
          - 3.10.14
    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.8.2
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Run task install
        run: task install
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCR_PYPI_CREDENTIALS_R }}
      - name: Get Version to Publish
        run: |
          export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
          export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
          export DEV_VERSION=$(gcloud artifacts versions list --project ${GCR_PYPI_PROJECT_ID} --repository=${GCR_PYPI_REPO} --location=${GCR_PYPI_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
            sort --version-sort -r | \
            grep -P "${VERSION}.dev" | \
            head -n 1 | \
            grep -oP "\d+$"
          )
          export DEV_VERSION=${DEV_VERSION:-0}  # Set .dev to 0 if not exist
          echo "DEV_VERSION=$(poetry version -s).dev$((DEV_VERSION+=1))" >> $GITHUB_ENV
          echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Update Version in pyproject.toml
        run: sed -i -E "s|^version = \"[^\"]+\"|version = \"${{ env.DEV_VERSION }}\"|g" pyproject.toml
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: Tagging Version in git
        run: |-
          git tag "$(poetry version -s)"
          git push origin "$(poetry version -s)"
      - name: Replace docker-compose image tag (server)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-server.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml
      - name: Replace docker-compose image tag (worker)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-worker.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml
      - name: Publish to non-prod artifact registry
        run: |-
          poetry config repositories.featurebyte_np https://${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}
          poetry publish --build -r featurebyte_np --username='_json_key_base64' --password='${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}'
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - publish
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - if: ${{ github.event_name == 'pull_request' }}
        name: Get Author Email (PR)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")" >> $GITHUB_ENV
      - if: ${{ github.event_name != 'pull_request' }}
        name: Get Author Email (PUSH)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_REF_NAME}")" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |-
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH }}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Load PUBLISH_RESULT into env
        run: echo "PUBLISH_RESULT=${{ needs.publish.result }}" >> $GITHUB_ENV
      - name: Load REPOSITORY into env
        run: echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH }}
        if: ${{ env.CHANNEL_ID != '' }}
        name: Send Slack notification with workflow result.
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |-
            {
                "text": "${{ env.REPOSITORY }} [${{ github.workflow }}] [${{ env.PUBLISH_RESULT }}]",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                        }
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "```publish: [${{ env.PUBLISH_RESULT }}]```"
                        }
                    }
                ]
            }
