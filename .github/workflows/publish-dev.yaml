name: publish
'on':
  workflow_dispatch: {}
  push:
    branches:
      - main
      - post-release/*
permissions:
  contents: write
env:
  GCR_DOCKER_LOCATION: us-central1
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  SERVER_IMAGE_REPO: us-central1-docker.pkg.dev/vpc-host-nonprod-xa739-xz970/docker/featurebyte-server
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}
jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        python-version:
          - 3.10.14
    outputs:
      DEV_VERSION: ${{ steps.get_version.outputs.DEV_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.8.2
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Run task install
        run: task install
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCR_PYPI_CREDENTIALS_R }}
      - name: Get Version to Publish
        id: get_version
        run: |
          export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
          export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
          if [ "$BRANCH_NAME" = "main" ]; then
            export SUFFIX="dev"
          else
            export SUFFIX="post"
          fi
          export DEV_VERSION=$(gcloud artifacts versions list --project ${GCR_PYPI_PROJECT_ID} --repository=${GCR_PYPI_REPO} --location=${GCR_PYPI_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
            sort --version-sort -r | \
            grep -P "${VERSION}.${SUFFIX}" | \
            head -n 1 | \
            grep -oP "\d+$"
          )
          export DEV_VERSION=${DEV_VERSION:-0}  # Set dev version to 0 if not exist
          export DEV_VERSION="$(poetry version -s).${SUFFIX}$((DEV_VERSION+=1))"
          echo "DEV_VERSION=${DEV_VERSION}" >> $GITHUB_ENV
          echo "DEV_VERSION=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Update Version in pyproject.toml
        run: sed -i -E "s|^version = \"[^\"]+\"|version = \"${{ env.DEV_VERSION }}\"|g" pyproject.toml
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - name: Tagging Version in git
        run: |-
          git tag "$(poetry version -s)"
          git push origin "$(poetry version -s)"
      - name: Replace docker-compose image tag (server)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-server.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml
      - name: Replace docker-compose image tag (worker)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-worker.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml
      - name: Publish to non-prod artifact registry
        run: |-
          poetry config repositories.featurebyte_np https://${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}
          poetry publish --build -r featurebyte_np --username='_json_key_base64' --password='${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}'
  test-install:
    runs-on: ${{ matrix.runner }}
    needs:
      - publish
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.12.4
          - 3.11.9
          - 3.10.11
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install featurebyte
        run: |-
          pip install --extra-index-url="https://_json_key_base64:${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}@${{ env.GCR_PYPI_LOCATION}}-python.pkg.dev/${{ env.GCR_PYPI_PROJECT_ID}}/${{ env.GCR_PYPI_REPO }}/simple" featurebyte==${{ needs.publish.outputs.DEV_VERSION }}
          python -c "import featurebyte; print(featurebyte.version)"
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - publish
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - if: ${{ github.event_name == 'pull_request' }}
        name: Get Author Email (PR)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${{ github.head_ref }}")" >> $GITHUB_ENV
      - if: ${{ github.event_name != 'pull_request' }}
        name: Get Author Email (PUSH)
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${{ github.ref_name }}")" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |-
          echo "${{ secrets.SLACK_USERS }}" > users.csv
          export AUTHOR_ID="$(grep -oP "${{ env.AUTHOR_EMAIL }},\s*\K[^,]*" users.csv)"
          if [ "${AUTHOR_ID}" = "" ]; then
            echo "No Slack user found for ${AUTHOR_EMAIL}"
            export AUTHOR_ID="C03D81HC6Q5"  # Developer Channel
            exit 1
          fi
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Load REPOSITORY into env
        run: |
          echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - name: Send Slack notification with workflow result.
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_OAUTH }}
          payload: |
            channel: ${{ env.CHANNEL_ID }}
            text: "${{ env.REPOSITORY }} [${{ github.workflow }}] [${{ needs.publish.result }} - ${{ needs.publish.outputs.DEV_VERSION }}]"
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
              - type: section
                text:
                  type: mrkdwn
                  text: "```publish: [${{ env.PUBLISH_RESULT }} - ${{ needs.publish.outputs.DEV_VERSION }}]```"
