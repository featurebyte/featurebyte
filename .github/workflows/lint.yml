name: lint

# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## GCR_PYPI_CREDENTIALS_R_B64    | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Docker     ] read
## SLACK_OAUTH                   | Slack App OAUTH Token           | [Slack                          ] write message


env:
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64                           # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}  # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]


on:
  pull_request:
    types:
      [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
        restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.3.1

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.in-project true
        poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}

    - name: Install dependencies
      run: |
        poetry install -n --sync --extras=server

    - name: Lint Checks
      run: make lint

    - name: Slack Message failure
      if: ${{ failure() }}
      run: |
        export AUTHOR_EMAIL=$(git show -s --format='%ae')
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi

        cat .github/slack-template-FAILED.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage
