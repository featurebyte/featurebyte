name: lint
# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## SLACK_OAUTH                   | Slack App OAUTH Token           | [Slack                          ] write message
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions: read-all
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
      - uses: actions/checkout@v3
      - uses: arduino/setup-task@v1
        with:
          version: 3.x
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3.1
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
      - name: Install packages needed for build
        run: |
          sudo apt-get install libsasl2-dev gcc
      - name: Lint Checks
        run: task lint
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: ["lint"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get Author Email (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")" >> $GITHUB_ENV
      - name: Get Author Email (PUSH)
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_REF_NAME}")" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH }}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Get Results
        run: |
          echo "LINT_RESULT=${{ needs.lint.result }}" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - name: Send Slack notification with workflow result.
        if: ${{ env.CHANNEL_ID != '' }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH }}
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |
            {
              "text": "${{ env.REPOSITORY }}[${{ github.workflow }}] [${{ env.LINT_RESULT }}]",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }, {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```lint: [${{ env.LINT_RESULT }}]```"
                  }
                }
              ]
            }
