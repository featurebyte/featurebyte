name: publish
# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## GCR_PYPI_CREDENTIALS_RW_B64   | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Python     ] read write
## GCR_DOCKER_CREDENTIALS_R_B64  | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Docker     ] read
## SLACK_OAUTH                   | Slack App OAUTH Token           | [Slack                          ] write message
on:
  push:
    branches:
      - main
permissions:
  contents: write
env:
  # Python
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  GCR_DOCKER_LOCATION: us-central1
  SERVER_IMAGE_REPO: "us-central1-docker.pkg.dev/vpc-host-nonprod-xa739-xz970/docker/featurebyte-server"
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64 # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }} # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}
jobs:
  publish:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.8.0"]
    steps:
      - uses: actions/checkout@v3
      - uses: arduino/setup-task@v1
        with:
          version: 3.x
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
          restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3.1
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}
      - name: Install packages needed for build
        run: |
          sudo apt-get install libsasl2-dev gcc
      - name: Install dependencies
        run: |
          task install
      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_PYPI_CREDENTIALS_R }}'
      - name: Get Version to Publish
        run: |
          export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
          export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
          export DEV_VERSION=$(gcloud artifacts versions list --project ${GCR_PYPI_PROJECT_ID} --repository=${GCR_PYPI_REPO} --location=${GCR_PYPI_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
            sort --version-sort -r | \
            grep -P "${VERSION}.dev" | \
            head -n 1 | \
            grep -oP "\d+$"
          )
          export DEV_VERSION=${DEV_VERSION:-0}  # Set .dev to 0 if not exist
          echo "DEV_VERSION=$(poetry version -s).dev${DEV_VERSION}" >> $GITHUB_ENV
          echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Update Version in pyproject.toml
        run: |
          sed -i -E "s|^version = \"[^\"]+\"|version = \"${{ env.DEV_VERSION }}\"|g" pyproject.toml

      - name: Tagging Version in git
        run: |
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
          git tag "$(poetry version -s)"
          git push origin "$(poetry version -s)"

      - name: Replace docker-compose image tag (server)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-server.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml

      - name: Replace docker-compose image tag (worker)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-worker.image = "${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}"' featurebyte/docker/featurebyte.yml

      - name: Publish to non-prod artifact registry
        run: |
          poetry config repositories.featurebyte_np https://${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}
          poetry publish --build -r featurebyte_np --username='_json_key_base64' --password='${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}'

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Docker Login NonProd Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GCR_DOCKER_LOCATION }}-docker.pkg.dev
          username: _json_key_base64
          password: ${{ secrets.GCR_DOCKER_CREDENTIALS_RW_B64 }}

      - name: Build & Tag & Push Image to NonProd
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ env.SERVER_IMAGE_REPO }}:${{ env.SHORT_HASH }}
            ${{ env.SERVER_IMAGE_REPO }}:${{ env.DEV_VERSION }}
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          file: docker/Dockerfile
          cache-from: type=registry,ref=${{ env.SERVER_IMAGE_REPO }}:${{ env.REF_VERSION }}
          cache-to: type=inline
          build-args: FEATUREBYTE_NP_PASSWORD=${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: ["publish"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get Author Email (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")" >> $GITHUB_ENV
      - name: Get Author Email (PUSH)
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_REF_NAME}")" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH }}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Get Results
        run: |
          echo "PUBLISH_RESULT=${{ needs.publish.result }}" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - name: Send Slack notification with workflow result.
        if: ${{ env.CHANNEL_ID != '' }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH }}
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |
            {
              "text": "${{ env.REPOSITORY }}[${{ github.workflow }}] [${{ env.PUBLISH_RESULT }}]",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }, {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```publish: [${{ env.PUBLISH_RESULT }}]```"
                  }
                }
              ]
            }
