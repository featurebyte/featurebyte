name: publish

# SECRETS NAME                   | Description                     | PERMISSIONS
# ------------------------------ | ------------------------------- | ----------------------------------------------------
## GCR_PYPI_CREDENTIALS_RW_B64   | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Python     ] read write
## GCR_DOCKER_CREDENTIALS_R_B64  | GCloud ServiceAccount B64 JSON  | [Artifact Registry | Docker     ] read
## SLACK_OAUTH                   | Slack App OAUTH Token           | [Slack                          ] write message

on:
  push:
    branches:
      - main

env:
  # Python
  GCR_PYPI_PROJECT_ID: vpc-host-nonprod-xa739-xz970
  GCR_PYPI_REPO: featurebyte-pypi
  GCR_PYPI_LOCATION: us-central1
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME: _json_key_base64                           # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]
  POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD: ${{ secrets.GCR_PYPI_CREDENTIALS_R_B64 }}  # Poetry to pull from google artifact factory [references pyproject.toml (tool.poetry.source).name]

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}

jobs:
  publish:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: [ "3.8.0" ]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ github.job }}
        restore-keys: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.3.1

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.in-project true
        poetry config http-basic.featurebyte_np ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_USERNAME} ${POETRY_HTTP_BASIC_FEATUREBYTE_NP_PASSWORD}

    - name: Install dependencies
      run: |
        make install

    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCR_PYPI_CREDENTIALS_R }}'

    - name: Update Version in pyproject.toml
      run: |
        export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
        export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
        export DEV_VERSION=$(gcloud artifacts versions list --project ${GCR_PYPI_PROJECT_ID} --repository=${GCR_PYPI_REPO} --location=${GCR_PYPI_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
          sort --version-sort -r | \
          grep -P "${VERSION}.dev" | \
          head -n 1 | \
          grep -oP "\d+$"
        )
        export DEV_VERSION=${DEV_VERSION:-0}  # Set .dev to 0 if not exist
        export PUBLISH_VERSION="${VERSION}.dev$((DEV_VERSION+=1))"
        sed -i -E "s|^version = \"[^\"]+\"|version = \"${PUBLISH_VERSION}\"|g" pyproject.toml

    - name: Publish to non-prod artifact registry
      run: |
        poetry config repositories.featurebyte_np https://${GCR_PYPI_LOCATION}-python.pkg.dev/${GCR_PYPI_PROJECT_ID}/${GCR_PYPI_REPO}
        poetry publish --build -r featurebyte_np --username='_json_key_base64' --password='${{ secrets.GCR_PYPI_CREDENTIALS_RW_B64 }}'

    - name: Tagging Version in git
      run: |
        git config --global user.name "featurebyte[bot]"
        git config --global user.email "featurebyte[bot]@users.noreply.github.com"
        git tag "$(poetry version -s)"
        git push origin "$(poetry version -s)"

    - name: Slack Message
      run: |
        export AUTHOR_EMAIL=$(git show -s --format='%ae')
        export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        export ARTIFACT=$(poetry version --no-ansi)

        cat .github/slack-template-PUSH.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage

    - name: Slack Message failure
      if: ${{ failure() }}
      run: |
        # Get the last committed email address
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        export REPOSITORY=$(grep -oP '/\K.+' <<< $GITHUB_REPOSITORY)
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi

        cat .github/slack-template-FAILED.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage
