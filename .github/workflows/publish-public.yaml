# Publish Beta
# ### REQUIREMENTS ###
# Given a branch name of release/0.3 and a version of 0.3.4
# Documentation image must be published with the same version
#
# == GIT TAG ==
# git tag will be created based on the branch name: release/0.3.4
# == PYPI ==
# pypi version is based on the version input: 0.3.4
# == DOCKER ==
# docker images will be tagged based on the above version
# image-tags: [SHORT_HASH, 0.3, 0.3.4]

name: publish-pypi
'on':
  workflow_dispatch:
    inputs:
      version:
        description: Version to publish
        required: true
        default: 0.0.0
      test-pypi:
        description: Publish to Test PyPI
        type: boolean
        required: true
        default: true
      pypi:
        description: Publish to PyPI
        type: boolean
        required: true
        default: false
      docker:
        description: Publish to docker.io
        type: boolean
        required: true
        default: false
permissions:
  contents: write
env:
  SERVER_IMAGE_REPO: featurebyte/featurebyte-server
concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}
jobs:
  publish:
    runs-on:
      group: Public Runners
    timeout-minutes: 360
    strategy:
      matrix:
        python-version:
          - 3.10.14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x
      - name: Check User
        run: |-
          # TODO: Change the allowed deployment user methodology
          if [[ "${{ github.event.sender.login }}" != "bushwhackr" && "${{ github.event.sender.login }}" != "admin-featurebyte" ]]; then
            exit 1
          fi
      - name: Check Version
        run: |
          if (grep -vqP "^[0-9]+[.][0-9]+[.][0-9]+" <<< "${{ github.event.inputs.version }}"); then
            echo "Version must be in the format of '^[0-9]+[.][0-9]+[.][0-9]+'"
            exit 1
          fi
          if (grep -vqP '^release/[0-9]+[.][0-9]+' <<< "${{ github.ref_name }}" ); then
            echo "Branch name must be in the format of 'release/[0-9]+[.][0-9]+'"
            exit 1
          fi
          if (grep -vqP "^${${{ github.ref_name }}#release/}" <<< "${{ github.event.inputs.version }}"); then
            echo "Version must match the branch name"
            exit 1
          fi
          echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 1.8.2
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Additional Configure Poetry
        run: |-
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Install packages needed for build
        run: |-
          sudo apt-get update
          sudo apt-get install libkrb5-dev libsasl2-dev libpython3-dev g++ gcc
      - name: Bump Version
        run: poetry version -- ${{ github.event.inputs.version }}
      - name: Replace docker-compose image tag (server)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-server.image = "${{ env.SERVER_IMAGE_REPO }}:${{ github.event.inputs.version }}"' featurebyte/docker/featurebyte.yml
      - name: Replace docker-compose image tag (worker)
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.services.featurebyte-worker.image = "${{ env.SERVER_IMAGE_REPO }}:${{ github.event.inputs.version }}"' featurebyte/docker/featurebyte.yml
      - if: ${{ github.event.inputs.test-pypi == 'true' }}
        name: Publish to Test-PyPI
        run: |-
          task install
          poetry publish --build -r test-pypi
      - if: ${{ github.event.inputs.pypi == 'true' }}
        name: Publish to PyPI
        run: |-
          task install
          poetry publish --build
      - name: Set Github Committer Settings
        run: |-
          git config --global user.name "featurebyte[bot]"
          git config --global user.email "featurebyte[bot]@users.noreply.github.com"
      - if: ${{ github.event.inputs.pypi == 'true' }}
        name: Tagging Version
        run: |-
          # Tagging version only when pushed to PyPI
          git tag "release/${{ github.event.inputs.version }}"
          git push origin "release/${{ github.event.inputs.version }}"
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: featurebyte
          password: ${{ secrets.DOCKER_IO_PASSWORD }}
      - name: Build & Tag & Push Image to docker.io
        if: ${{ github.event.inputs.docker == 'true' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |-
            ${{ env.SERVER_IMAGE_REPO }}:latest
            ${{ env.SERVER_IMAGE_REPO }}:${{ env.SHORT_HASH }}
            ${{ env.SERVER_IMAGE_REPO }}:${{ github.event.inputs.version }}
          context: .
          platforms: |-
            linux/amd64
            linux/arm64
          file: docker/Dockerfile
          cache-from: type=registry,ref=${{ env.SERVER_IMAGE_REPO }}:latest
          cache-to: type=inline
  slack:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - publish
    steps:
      - uses: actions/checkout@v4
      - name: Get Author Email
        run: echo "AUTHOR_EMAIL=$(git show -s --format='%ae')" >> $GITHUB_ENV
      - name: Get Channel ID
        run: |-
          echo "${{ secrets.SLACK_USERS }}" > users.csv
          export AUTHOR_ID="$(grep -oP "${{ env.AUTHOR_EMAIL }},\s*\K[^,]*" users.csv)"
          if [ "${AUTHOR_ID}" = "" ]; then
            echo "No Slack user found for ${AUTHOR_EMAIL}"
            export AUTHOR_ID="C03D81HC6Q5"  # Developer Channel
            exit 1
          fi
          echo "CHANNEL_ID=${AUTHOR_ID}" >> $GITHUB_ENV
      - name: Load PUBLISH_RESULT into env
        run: echo "PUBLISH_RESULT=${{ needs.publish.result }}" >> $GITHUB_ENV
      - name: Load REPOSITORY_URL into env
        run: echo "REPOSITORY_URL=https://github.com/$(echo '${{ github.repository }}')" >> $GITHUB_ENV
      - name: Load REPOSITORY into env
        run: echo "REPOSITORY=$(echo '${{ github.repository }}' | cut -d / -f2)" >> $GITHUB_ENV
      - name: Send Slack notification with workflow result.
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_OAUTH }}
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |-
            {
                "text": "${{ env.REPOSITORY }} [${{ github.workflow }}] [${{ env.PUBLISH_RESULT }}]",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "`${{ env.REPOSITORY }} [${{ github.workflow }}]`: ${{ github.event.pull_request.html_url || github.event.head_commit.url || env.REPOSITORY_URL }}"
                        }
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "```publish: [${{ env.PUBLISH_RESULT }}]\n\ntest-pypi: [${{ github.event.inputs.test-pypi }}]\npypi: [${{ github.event.inputs.pypi }}]\ndocker: [${{ github.event.inputs.docker }}]```"
                        }
                    }
                ]
            }
