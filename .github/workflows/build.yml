name: build

on:
  workflow_dispatch:
  pull_request:
    types:
      [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: write
  repository-projects: read
  issues: write
  pull-requests: write

env:
  SNOWFLAKE_USER: github
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ACCOUNT: "fm54506.us-central1.gcp"
  SNOWFLAKE_WAREHOUSE: COMPUTE_WH
  SNOWFLAKE_DATABASE: FEATUREBYTE_TESTING
  SNOWFLAKE_SCHEMA: PUBLIC
  SNOWFLAKE_SCHEMA_FEATUREBYTE: FEATUREBYTE
  GIT_SSH_KEY_PATH: "/tmp/git_key"
  SLACK_OAUTH: ${{ secrets.SLACK_OAUTH }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.8"]
    env:
      GCR_REPO_NAME: featurebyte-pypi
      GCR_REPO_LOCATION: us-central1
      GC_PROJECT_ID: vpc-host-nonprod-xa739-xz970

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache keys
      run: |
        echo "WEEK0=$(date +%U)" >> $GITHUB_ENV
        echo "WEEK1=$(date +%U -d "7 day ago")" >> $GITHUB_ENV
        echo "WEEK2=$(date +%U -d "14 day ago")" >> $GITHUB_ENV

    - name: Setup cache keys (PR)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "TAG=-${GITHUB_HEAD_REF}" >> $GITHUB_ENV

    - name: Setup cache
      uses: actions/cache@v3.0.4
      with:
        path: .venv
        key: featurebyte-venv-${{ matrix.python-version }}-${{ env.WEEK0 }}${{ env.TAG }}
        restore-keys: featurebyte-venv-${{ matrix.python-version }}-${{ env.WEEK0 }} featurebyte-venv-${{ matrix.python-version }}-${{ env.WEEK1 }} featurebyte-venv-${{ matrix.python-version }}-${{ env.WEEK2 }}

    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Install Poetry
      run: |
        pip install keyring keyrings.google-artifactregistry-auth
        printf "%s\n" "[distutils]" "index-servers =" "    $GCR_REPO_NAME" "" "[$GCR_REPO_NAME]" "repository: https://$GCR_REPO_LOCATION-python.pkg.dev/$GC_PROJECT_ID/$GCR_REPO_NAME/" > ~/.pypirc
        mkdir -p ~/.config/pip && printf "%s\n" "[global]" "extra-index-url = https://$GCR_REPO_LOCATION-python.pkg.dev/$GC_PROJECT_ID/$GCR_REPO_NAME/simple/" > ~/.config/pip/pip.conf
        python -m pip install poetry==1.2.0rc99
        rm ~/.pypirc ~/.config/pip/pip.conf
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        make install-nolock

    - name: Lint Checks
      run: |
        make lint

    - name: Run tests
      run: |
        echo "${{ secrets.PLAYGROUND_PRIVATE_KEY }}" > /tmp/git_key
        chmod 400 /tmp/git_key
        git config --global user.email "github@featurebyte.com"
        git config --global user.name "FeatureByte Github Testing"
        make test

    - name: Test Coverage Report
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml

    - name: Update Coverage Badge
      if: github.event_name == 'push'
      uses: schneegans/dynamic-badges-action@v1.4.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 773e2960183c0a6fe24c644d95d71fdb
        filename: coverage.json
        label: coverage
        message: ${{ steps.coverageComment.outputs.coverage }}
        color: ${{ steps.coverageComment.outputs.color }}

    - name: 'Build and Publish with .dev[.N] | Send Push Slack Message'
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        export PACKAGE=$(poetry version --no-ansi | cut -d ' ' -f1)
        export VERSION=$(poetry version --no-ansi --short | grep -oP '\d+[.]\d+[.]\d+')
        export DEV_VERSION=$(gcloud artifacts versions list --project ${GC_PROJECT_ID} --repository=${GCR_REPO_NAME} --location=${GCR_REPO_LOCATION} --package=${PACKAGE} --format='csv[no-heading](VERSION)' | \
            sort --version-sort -r | \
            grep -P "${VERSION}.dev" | \
            head -n 1 | \
            grep -oP "\d+$"
        )
        export DEV_VERSION=${DEV_VERSION:-0}  # Set .dev to 0 if not exist
        export PUBLISH_VERSION="${VERSION}.dev$((DEV_VERSION+=1))"
        sed -i -E "s|^version = \"[^\"]+\"|version = \"${PUBLISH_VERSION}\"|g" pyproject.toml

        poetry config repositories.featurebyte_np https://$GCR_REPO_LOCATION-python.pkg.dev/$GC_PROJECT_ID/$GCR_REPO_NAME
        poetry publish --build -r featurebyte_np | tee output.txt

        export OUTPUT=$(cat output.txt)

        # Sending Slack Message
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        # Lookup email address and export to AUTHOR_ID
        export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`

        # Set GITHUB_HEAD_REF this is onyl present when during a PR event
        export GITHUB_HEAD_REF=${GITHUB_HEAD_REF:-MERGING}

        cat .github/slack-template-PUSH.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage


    - name: Slack Message PR
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        # Get data
        export COVERAGE_PERCENTAGE=${{ steps.coverageComment.outputs.coverage }}
        export COVERAGE_WARNING=${{ steps.coverageComment.outputs.warnings }}
        export COVERAGE_ERRORS=${{ steps.coverageComment.outputs.errors }}
        export COVERAGE_FAILURES=${{ steps.coverageComment.outputs.failures }}
        export COVERAGE_SKIPPED=${{ steps.coverageComment.outputs.skipped }}
        export COVERAGE_TESTS=${{ steps.coverageComment.outputs.tests }}
        export COVERAGE_TIME=${{ steps.coverageComment.outputs.time }}

        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        # Get the last committed email address
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          # Route message to Chester
          export AUTHOR_ID=U03P1DE5R8V
        else
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi
        echo "AUTHOR_ID=${AUTHOR_ID}"

        cat .github/slack-template-PR.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage
    - name: Slack Message failure
      if: ${{ failure() }}
      run: |
        git fetch --no-recurse-submodules --prune origin ${GITHUB_HEAD_REF}
        # Get the last committed email address
        export AUTHOR_EMAIL=$(git show -s --format='%ae' "origin/${GITHUB_HEAD_REF}")
        echo "AUTHOR_EMAIL=${AUTHOR_EMAIL}"

        if [ -z ${AUTHOR_EMAIL+x} ]; then
          # Route message to Chester
          export AUTHOR_ID=U03P1DE5R8V
        else
          # Lookup email address and export to AUTHOR_ID
          export AUTHOR_ID=`curl -X POST -H "Authorization: Bearer ${SLACK_OAUTH}" -H 'Content-type: application/json; charset=utf-8' https://slack.com/api/users.list | grep -oP $(echo '"id":"\K[^"]+?"(?:(?!"id").)*${AUTHOR_EMAIL}' | envsubst) | grep -oP '^[^"]+'`
        fi
        echo "AUTHOR_ID=${AUTHOR_ID}"

        cat .github/slack-template-FAILED.json | envsubst | curl -X POST \
          -H "Authorization: Bearer ${SLACK_OAUTH}" \
          -H 'Content-type: application/json; charset=utf-8' \
          --data-binary @- https://slack.com/api/chat.postMessage
