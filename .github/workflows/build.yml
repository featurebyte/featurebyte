name: build

on:
  pull_request:
    types:
      [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: write
  repository-projects: read
  issues: write
  pull-requests: write

env:
  SNOWFLAKE_USER: github
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
  SNOWFLAKE_ACCOUNT: "fm54506.us-central1.gcp"
  SNOWFLAKE_WAREHOUSE: COMPUTE_WH
  SNOWFLAKE_DATABASE: FEATUREBYTE_TESTING
  SNOWFLAKE_SCHEMA: PUBLIC
  SNOWFLAKE_SCHEMA_FEATUREBYTE: FEATUREBYTE
  GIT_SSH_KEY_PATH: "/tmp/git_key"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.8"]
    env:
      GCR_REPO_NAME: featurebyte-pypi
      GCR_REPO_LOCATION: us-central1
      GC_PROJECT_ID: vpc-host-nonprod-xa739-xz970

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up cache
      uses: actions/cache@v3.0.4
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-featurebyte

    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Install Poetry
      run: |
        pip install keyring keyrings.google-artifactregistry-auth
        printf "%s\n" "[distutils]" "index-servers =" "    $GCR_REPO_NAME" "" "[$GCR_REPO_NAME]" "repository: https://$GCR_REPO_LOCATION-python.pkg.dev/$GC_PROJECT_ID/$GCR_REPO_NAME/" > ~/.pypirc
        mkdir -p ~/.config/pip && printf "%s\n" "[global]" "extra-index-url = https://$GCR_REPO_LOCATION-python.pkg.dev/$GC_PROJECT_ID/$GCR_REPO_NAME/simple/" > ~/.config/pip/pip.conf
        python -m pip install poetry==1.2.0rc99
        rm ~/.pypirc ~/.config/pip/pip.conf

    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        make install

    - name: Run style checks
      run: |
        make check-codestyle

    - name: Run static typing checks
      run: |
        make mypy

    - name: Run tests
      run: |
        echo "${{ secrets.PLAYGROUND_PRIVATE_KEY }}" > /tmp/git_key
        chmod 400 /tmp/git_key
        git config --global user.email "github@featurebyte.com"
        git config --global user.name "FeatureByte Github Testing"
        make test

    - name: Test Coverage Report
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        default-branch:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml

    - name: Update Coverage Badge
      if: github.event_name == 'push'
      uses: schneegans/dynamic-badges-action@v1.4.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 773e2960183c0a6fe24c644d95d71fdb
        filename: coverage.json
        label: coverage
        message: ${{ steps.coverageComment.outputs.coverage }}
        color: ${{ steps.coverageComment.outputs.color }}

    - name: Run safety checks
      run: |
        make check-safety
